/*
 * 
 * 
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Product from '../model/Product';
import ProductResults from '../model/ProductResults';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the findBy operation.
     * @callback moduleapi/DefaultApi~findByCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductResults{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of products
     * @param {String} locale 
     * @param {Number} pos 
     * @param {Number} pageSize 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Date} opts.launchDateFrom 
     * @param {Date} opts.launchDateTo 
     * @param {Number} opts.stockMin 
     * @param {Number} opts.stockMax 
     * @param {Number} opts.priceMin 
     * @param {Number} opts.priceMax 
     * @param {Number} opts.categoryId 
     * @param {module:api/DefaultApi~findByCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findBy(locale, pos, pageSize, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locale' is set
      if (locale === undefined || locale === null) {
        throw new Error("Missing the required parameter 'locale' when calling findBy");
      }
      // verify the required parameter 'pos' is set
      if (pos === undefined || pos === null) {
        throw new Error("Missing the required parameter 'pos' when calling findBy");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling findBy");
      }

      let pathParams = {
        'locale': locale
      };
      let queryParams = {
        'name': opts['name'],'launchDateFrom': opts['launchDateFrom'],'launchDateTo': opts['launchDateTo'],'stockMin': opts['stockMin'],'stockMax': opts['stockMax'],'priceMin': opts['priceMin'],'priceMax': opts['priceMax'],'categoryId': opts['categoryId'],'pos': pos,'pageSize': pageSize
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductResults;

      return this.apiClient.callApi(
        '/api/product/{locale}/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findByIdLocalized operation.
     * @callback moduleapi/DefaultApi~findByIdLocalizedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return product data in the specified language
     * @param {String} locale 
     * @param {Number} id 
     * @param {module:api/DefaultApi~findByIdLocalizedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findByIdLocalized(locale, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'locale' is set
      if (locale === undefined || locale === null) {
        throw new Error("Missing the required parameter 'locale' when calling findByIdLocalized");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findByIdLocalized");
      }

      let pathParams = {
        'locale': locale,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;

      return this.apiClient.callApi(
        '/api/product/{locale}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getExternalGrammar operation.
     * @callback moduleapi/DefaultApi~getExternalGrammarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {module:api/DefaultApi~getExternalGrammarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExternalGrammar(path, callback) {
      
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getExternalGrammar");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/application.wadl/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWadl operation.
     * @callback moduleapi/DefaultApi~getWadlCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getWadlCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWadl(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.sun.wadl+xml', 'application/xml'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/application.wadl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}